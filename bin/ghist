#!/usr/bin/env ruby
# frozen_string_literal: true

# print [g]it [hist]ory of a file
#
# Examples:
#   [print most recent 3 commits (default)]
#   ghist app/controllers/application_controller.rb
#
#   [print most recent 10 commits]
#   ghist app/controllers/application_controller.rb 10

# load("#{Dir.home}/code/dotfiles/utils/ruby/debug.rb")
load("#{Dir.home}/code/dotfiles/utils/ruby/cli_program.rb")

sloptions =
  Slop.parse do |o|
    o.on('-h', '--help', 'view this help info') do
      puts(o.to_s.dup.sub(%r{#{Dir.home}/code/dotfiles/bin/}, ''))
      exit
    end
  end

class GitHistory < CliProgram
  def call
    # puts(%(most_recent_commit_with_file: #{most_recent_commit_with_file}))
    # puts(%(num_commits: #{num_commits}))
    puts(%(commits_to_show: #{commits_to_show}))

    file_name_at_this = file

    commits_to_show.each do |commit|
      puts
      system('hr')
      system({ 'DELTA_PAGER' => 'cat' }, "git show '#{commit}' -- '#{file_name_at_this}'")
      system('hr')

      file_name_at_this = renames[commit] || file_name_at_this
    end
  end

  private

  memo_wise \
  def file
    arguments[0]
  end

  memo_wise \
  def num_commits
    arguments[1] || 3
  end

  memo_wise \
  def commits_to_show
    `#{<<~BASH.squish}`.split("\n")
      git log
        -n "#{num_commits}"
        "#{most_recent_commit_with_file}"
        --format=%H
        --follow
        --
        "#{file}"
    BASH
  end

  memo_wise \
  def most_recent_commit_with_file
    if system(%(test -e "#{file}"))
      'HEAD'
    else
      `git log --all -1 --format="%H" -- "#{file}"`.rstrip
    end
  end

  memo_wise \
  def renames
    `git log HEAD --format=%H --name-status --follow -- '#{file}'`.
      split(/\n(?=[0-9a-f]{40})/).
      to_h do |sha_and_name_info|
        sha_and_name_info.
          match(/(?<sha>[0-9a-f]{40})\n\n(?<rename_info>R\d+\s+(?<previous_name>\S+))?/).
          named_captures.
          values_at('sha', 'previous_name')
      end
  end
end

GitHistory.new(sloptions:).call
